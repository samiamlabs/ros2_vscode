#!/usr/bin/env bash

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)" # Get the directory of this file

function check_in_container {
	if [ ! -f /.dockerenv ]; then
		echo "Please run inside of a docker container"
		exit 1
	fi
}

function in_container_install_dependencies() {
	check_in_container
	cd $DIR &&
		sudo bash -c 'apt-get update && rosdep install --from-paths src --ignore-src -y' &&
		python3 -m pip install -r requirements.txt
}

function in_container_build() {
	check_in_container
	cd $DIR/.. && colcon build --merge-install --symlink-install
}

function in_container_build_verbose() {
	check_in_container
	cd $DIR/.. && colcon build --merge-install --symlink-install --event-handlers console_cohesion+
}

function in_container_rebuild() {
	check_in_container
	cd $DIR/.. &&
		rm -r build/ install/ &&
		source /opt/dependencies_ws/install/setup.bash &&
		colcon build --merge-install --symlink-install
}

function in_container_run_tests() {
	check_in_container
	cd $DIR/.. &&
		colcon test --merge-install --executor sequential --pytest-args --verbose &&
		colcon test-result --verbose
}

function in_container_run_tests_for_package() {
	check_in_container
	cd $DIR/.. &&
		colcon build --merge-install --symlink-install --packages-select $1 &&
		colcon test --merge-install --executor sequential --packages-select $1 --pytest-args --verbose --event-handlers console_direct+ &&
		colcon test-result --verbose

}

function in_container_lint() {
	check_in_container
	cd $DIR &&
		ament_flake8 &&
		ament_cpplint
}

# Check if the command exists
case "$1" in
in_container_build_verbose | \
	in_container_install_dependencies | \
	in_container_rebuild | \
	in_container_run_tests | \
	in_container_run_tests_for_package | \
	in_container_lint | \
	in_container_build)
	$1 ${@:2}
	exit 0
	;;
esac

echo "Command \"$1\" not found!"
exit 1
